/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l4xx_hal.h"
#include "adc.h"
#include "dac.h"
#include "dma.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "my_usart.h"
#include "my_extern_val.h"
#include "my_gloabal_val.h"
#include "my_ADC.h"
#include "my_DAC.h"
#include "my_led.h"
#include "my_101.h"

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

extern uint8_t my_nmi_status;
extern uint16_t ADC2_GetValue[ADC2_ROW][ADC2_COLM];//用于保存采集的值,M个通道,N次
extern uint16_t ADC1_GetValue[ADC1_ROW][ADC1_COLM];//用于保存采集的值,M个通道,N次

extern	uint32_t my_dac_tr_data;

extern uint8_t  my_usart2_re_buf[200];
extern uint16_t my_usart2_re_count;
extern uint16_t VREFINT_CAL;
extern uint16_t MY_TS_CAL1;
extern uint16_t MY_TS_CAL2;

//DAC1
extern uint32_t my_dac1_channel1_data_i;
extern uint32_t my_dac1_channel2_data_e;

//USART3
extern UART_HandleTypeDef huart3;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
    __IO int xi=0;

    uint8_t my_usart_tx_data[20]= {0x31,0x32,0x00,0x34,0X35,0X36,0X37,0X38,0X39,0X3A};
    uint32_t my_fr=0;
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_DAC1_Init();
  MX_UART4_Init();
  MX_TIM6_Init();
  MX_TIM7_Init();
  MX_RTC_Init();
  MX_ADC2_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
	
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
		HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
    //__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1); //这个可以清除外部中断，每个中断的清除函数都不一样，需要分别调用
    //__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2); //这个可以清除外部中断，每个中断的清除函数都不一样，需要分别调用
		
		//串口3是与从CPU通信，串口4调试端口
    //MX_USART3_AS_UART_Init_self();  //USART3初始化使用，USART3默认做输入口，防止漏电，工作的时候变为串口

    HAL_Delay(3000);
    HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
//		HAL_Delay(1000);
//		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET); //绿
//    HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);//红
//    HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);//红
//    HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);//绿
//    HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);//红
//    HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);//绿
//    HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);//绿
//    HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);//红

//    HAL_GPIO_WritePin(CPU2_CTRL_GPIO_Port,CPU2_CTRL_Pin,GPIO_PIN_RESET);//打开小CPU，默认是打开的
//    HAL_Delay(1000);
 //  HAL_GPIO_WritePin(CPU2_CTRL_GPIO_Port,CPU2_CTRL_Pin,GPIO_PIN_SET);//关断小CPU

    //串口UART4
    HAL_UART_Transmit(&huart4,my_usart_tx_data,4,1000);
    printf("\nPrintf MCU1-UART4 IS OK!!\n");
    USART_printf(&huart4,"usart_printf MCU1-UART4 IS OK!!");
		//USART_printf(&huart3,"MAIN MCU_UART3 IS OK!!--%d--",0);
		

    HAL_UART_Receive_IT(&huart4,&my_usart4_re_buf[my_usart4_write_count],1);  //开启接收USART2函数
    HAL_UART_Receive_IT(&huart3,&my_usart3_re_buf[my_usart3_write_count],1);  //开启接收USART2函数


    my_fr=HAL_RCC_GetSysClockFreq();  //读取系统时钟
    printf("\n ================SysClockFreq=%dMHZ \n",my_fr/1000000);

    //---ADC1,ADC2
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC1_GetValue[0][0],ADC1_ROW*ADC1_COLM);//&ADC2_GetValue[0][0],ADC2_ROW*ADC2_COLM
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&ADC2_GetValue[0][0],ADC2_ROW*ADC2_COLM);//&ADC1_GetValue[0][0],ADC1_ROW*ADC1_COLM


    //--------定时器控制
		HAL_TIM_Base_Start_IT(&htim7);  //开启tim7定时器，250us
    HAL_TIM_Base_Start_IT(&htim6);  //开启tim6定时器,200ms
    

//	HAL_TIM_Base_Stop_IT(&htim6);
//	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
//	HAL_TIM_Base_Stop_IT(&htim7);



    /* 得到基准电压校准值 */
    VREFINT_CAL = *(__IO uint16_t *)(0X1FFF75AA);
    MY_TS_CAL1 = *(__IO uint16_t *)(0X1FFF75A8);
    MY_TS_CAL2 = *(__IO uint16_t *)(0X1FFF75CA);
    printf("\n VREFINT_CAL=[%d],TS_CAL1 =%d,TS_CAL2 =%d\n",VREFINT_CAL,MY_TS_CAL1,MY_TS_CAL2);
		my_adc_1_convert_dis(1);

//关EXIT中断
    HAL_NVIC_DisableIRQ(EXTI1_IRQn);
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1); //这个可以清除外部中断，每个中断的清除函数都不一样，需要分别调用
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2); //这个可以清除外部中断，每个中断的清除函数都不一样，需要分别调用


//DAC1
    my_dac1_channel1_data_i=0X0FFF/2;
    my_dac1_channel2_data_e=0X0FFF/4;
    HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,my_dac1_channel1_data_i); //设置模拟量
    HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //开启DAC1的通道1  电流通道

    HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,my_dac1_channel2_data_e);//设置模拟量
    HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);//开启DAC1的通道2  电场通道

    my_dac1_channel1_data_i=0X0FFF/11*10;
    HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,my_dac1_channel1_data_i);//设置模拟量，后自动输出
    my_dac1_channel2_data_e=0X0FFF/11*10;
    HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_2,DAC_ALIGN_12B_R,my_dac1_channel2_data_e);//设置模拟量，后自动输出


//开EXIT中断
		
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
		HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);

		
    //USART_printf(&huart3,"STATUS=%d,%d\n",HAL_NVIC_GetPendingIRQ(EXTI1_IRQn),HAL_NVIC_GetActive(EXTI1_IRQn));
    
		
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
		
		


//控制线圈放电

    HAL_GPIO_WritePin(SOURCE_CTRL_GPIO_Port,SOURCE_CTRL_Pin,GPIO_PIN_RESET);	 //0关闭，1打开GPIO_PIN_RESET，GPIO_PIN_SET
//充放电控制
    HAL_GPIO_WritePin(EN_25505_GPIO_Port,EN_25505_Pin,GPIO_PIN_RESET); //0使能充电，1关断充电
		
		
//测试使用
		my_fun_101_send_long_data(&huart3,0x11,my_usart_tx_data,5);
		HAL_Delay(1000);
		my_fun_101_send_long_data(&huart3,0x12,my_usart_tx_data,5);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

       
			
			//测试发送101帧数据
			//my_fun_101_send_short_data(&huart3,0x11,my_usart_tx_data,5);
			//HAL_Delay(1000);
			//my_fun_101_send_long_data(&huart3,0x12,my_usart_tx_data,5);
			//HAL_Delay(5000);
			
			
			my_fun_conversation_mcu_TX();
			my_fun_conversation_mcu_RX();


        //TIM6的计数器清零，这样计数就从新开始
        //if(my_tim6_count>8)
        //__HAL_TIM_SET_COUNTER(&htim6,0);




        //		//循环发送串口数据
//		my_usart_tx_data[0]=my_usart_tx_data[0]+1;
//		if(my_usart_tx_data[0]>97+26)
//			my_usart_tx_data[0]=0X30;
//		HAL_UART_Transmit(&huart4,my_usart_tx_data,1,1000);
//		HAL_UART_Transmit(&huart3,my_usart_tx_data,1,1000);
//		HAL_Delay(1000);


//  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);  //1.41ma,.1.31MA
        // HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);	//1.3ma

        //	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,PWR_STOPENTRY_WFI); //0.328MA,0.312ma
        //	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);//0.33ma 0.312ma

        //HAL_PWR_EnterSTANDBYMode();
    }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
  PeriphClkInit.PLLSAI2.PLLSAI2N = 16;
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV8;
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_ADC2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
    /* User can add his own implementation to report the HAL error return state */
    while(1)
    {
    }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
